{"version":3,"sources":["ColorModeSwitcher.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","onClick","icon","App","selectBox","useRef","useState","renderData","setRenderData","selectedCourses","setSelectedCourses","removed","setRemoved","colors","times","sort","options","Map","data","map","item","values","push","courseColorMap","value","forEach","index","useEffect","temp","filter","includes","maxW","spacing","justifyContent","alignItems","my","w","ref","closeMenuOnSelect","isMulti","onChange","e","align","wrap","mb","current","select","clearValue","h","overflow","overflowY","mt","time","Math","random","day","position","length","top","as","p","borderWidth","borderColor","borderTopColor","charAt","toLowerCase","borderTopWidth","bg","slice","oldArray","zIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1f5220b7.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"solid\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React, { useRef } from 'react';\nimport {\n  Theme,\n  ChakraProvider,\n  Container,\n  VStack,\n  Box,\n  HStack,\n  Button,\n  Flex,\n  Stack,\n  Text,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport Select from 'react-select'\nimport data from './schedule.json';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nconst App = () => {\n  const bg = useColorModeValue(\"white\", \"gray.800\")\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.300\")\n\n  const selectBox = useRef(null);\n\n  const [renderData, setRenderData] = useState([])\n  const [selectedCourses, setSelectedCourses] = useState([])\n  const [removed, setRemoved] = useState([])\n  const colors = ['#4299E1B3', '#E53E3EB3', '#38A169B3', '#505AD5B3', '#D69E2EB3', '#D53F8CB3', '#00B5D8B3', '#DD6B20B3', '#319795B3', '#715096B3']\n  const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n\n  const times = [\n    '18:00', '12:00', '15:00', '13:00', '19:00', '09:00',\n    '10:00', '14:00', '17:00', '11:00', '16:00', '20:00'\n  ].sort()\n\n  const options = []\n\n  const uniqueCourseCode = [...new Map(data.map(item => [item[\"Course Code\"], item])).values()];\n\n  uniqueCourseCode.map(item => {\n    options.push({ 'value': item['Course Code'], 'label': item['Course Code'] })\n  })\n\n  const courseColorMap = {}\n  selectedCourses.map(item => item.value).forEach((item, index) => (\n    courseColorMap[item] = colors[index]\n  ));\n\n  const resetAll = () => {\n    selectBox.current.select.clearValue();\n    setSelectedCourses([])\n    setRemoved([])\n  }\n\n  useEffect(() => {\n    let temp = data.filter((item) => selectedCourses.map(item => item.value).includes(item['Course Code']))\n    temp = temp.filter((item) => !removed.includes(item['index']))\n    setRenderData(temp)\n  }, [removed, selectedCourses])\n\n\n  return (\n    <Container maxW=\"container.xl\" >\n      <HStack spacing={3} justifyContent='space-between' alignItems='center'>\n        <Box\n          my={3} color='black' w='100%'>\n          <Select\n            ref={selectBox}\n            closeMenuOnSelect={false}\n            options={options}\n            isMulti\n            onChange={e => setSelectedCourses(e)}\n          />\n        </Box>\n        <ColorModeSwitcher />\n      </HStack>\n      <Flex justifyContent='space-between' align='center' wrap='wrap-reverse'>\n        <Text fontSize=\"xl\">Click On Any  Schedule Item To Remove</Text>\n        <HStack spacing={3} justifyContent='flex-end' mb={3}>\n          <Button onClick={() => setRemoved([])}>Reset Removed</Button>\n          <Button onClick={resetAll}>Reset All</Button>\n        </HStack>\n      </Flex>\n      <HStack align='top' spacing='0' h='650px' overflow=\"auto\" overflowY='hidden'>\n        <VStack spacing='0' mt={3}>\n          {times.map((time) => (\n            <Flex\n              key={Math.random() * 1000}\n              h='50px'\n              w='50px'\n              alignItems='flex-end'\n              justifyContent='center'\n            >{time}</Flex>\n          ))}\n        </VStack>\n        {weekDays.map((day) => (\n          <VStack\n            spacing='0'\n            position='relative'>\n            <Flex\n              key={Math.random() * 1000}\n              h='50px'\n              w='199px'\n              alignItems='center'\n              justifyContent='center'>{day}</Flex>\n            {times.map((time, index) => (\n              renderData.filter(e => e['Day'] === day && e['Start Time'] === time).length !== 0 ?\n                <Flex\n                  position='absolute'\n                  top={`${50 * (index + 1)}px`}\n                  w='100%'>\n                  {renderData.filter(e => e['Day'] === day && e['Start Time'] === time).map((item) => (\n                    <Box\n                      as=\"button\"\n                      p={1}\n                      borderWidth='1px'\n                      borderColor='white'\n                      borderTopColor={item['Class Section'].charAt(0).toLowerCase() == 'l' && 'yellow'}\n                      borderTopWidth={item['Class Section'].charAt(0).toLowerCase() == 'l' && '5px'}\n                      bg={courseColorMap[item['Course Code']] ?? 'transparent'}\n                      overflow='auto'\n                      w={`${100 / renderData.filter(e => e['Day'] === day && e['Start Time'] === time).length}%`}\n                      h={`${(item['End Time'].slice(0, 2) - item['Start Time'].slice(0, 2)) * 50}px`}\n                      onClick={() => setRemoved(oldArray => [...oldArray, item['index']])}\n                    >\n                      <Stack spacing={1} fontSize='sm'>\n                        <Box>\n                          {item['Course Code']} - {item['Class Section']}\n                        </Box>\n                        <Box>\n                          {item['Class Type']}\n                        </Box>\n                        <Box>\n                          {item['Start Time']} - {item['End Time']}\n                        </Box>\n                      </Stack>\n                    </Box>\n                  ))}\n                </Flex> :\n                <Box\n                  top={`${index * 50 + 50}px `}\n                  w='199px'\n                  h='50px'\n                  borderWidth='1px'\n                  position='absolute'\n                  zIndex='-1' />\n            ))}\n          </VStack>\n        ))\n        }\n      </HStack>\n    </Container >\n  );\n}\n\nexport default App;\n\n{/* <HStack justifyContent='center' >\n          {\n            <>\n              <VStack border='1px' spacing='0'>\n                <Flex h='50px'></Flex>\n                {times.map((time) => (\n                  <Flex key={Math.random() * 1000} border='1px' h='50px' w='50px' alignItems='center' justifyContent='center'>{time}</Flex>\n                ))}\n              </VStack>\n              {weekDays.map((day) => (\n                <VStack key={Math.random() * 1000} border='1px' spacing='0' >\n                  <Flex h='50px' alignItems='center'>{day}</Flex>\n                  {\n                    times.map((time, index) => (\n                      grouped[time]?.[day] ?\n                        grouped[time][day].map((item) => (\n\n                          <Flex key={Math.random() * 1000} direction='column' border='1px' w='150px' h={50 * (item['End Time'].slice(0, 2) - item['Start Time'].slice(0, 2)) / grouped[time][day].length + 'px'} bg={courseColorMap[item['Course Code']] + '.500' ?? 'blue.500'} overflow='auto' p={1}>\n                            <IconButton\n                              alignSelf='end'\n                              variant='ghost'\n                              aria-label=\"Remove\"\n                              icon={<SmallCloseIcon />}\n                              onClick={() => setRemoved(oldArray => [...oldArray, item['index']])}\n                              display='flex'\n                              align='center'\n                              justifyContent='center'\n                              alignSelf='flex-end'\n                            />\n                            <VStack spacing={1} align='start'>\n                              <Box>\n                                {item['Course Code']}\n                              </Box>\n                              <Box>\n                                {item['Class Section']}\n                              </Box>\n                              <Box>\n                                {item['Class Type']}\n                              </Box>\n                              <Box>\n                                {item['Start Time']} - {item['End Time']}\n                              </Box>\n                            </VStack>\n                          </Flex>\n                        ))\n                        :\n                        grouped[times[index - 1]]?.[day]\n                          ?\n                          <Flex key={Math.random() * 1000} h='0px' w='150px' />\n                          :\n                          <Flex key={Math.random() * 1000} border='1px' h='50px' w='150px' />\n                    ))\n                  }\n                </VStack>\n              ))}\n            </>\n          }\n        </HStack> */}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ChakraProvider>\n    <ColorModeScript />\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["ColorModeSwitcher.js","App.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","onClick","icon","App","exportBg","selectRef","useRef","calendarRef","useState","renderData","setRenderData","selectedCourses","setSelectedCourses","removed","setRemoved","colors","times","sort","options","Map","data","map","item","values","push","value","label","courseColorMap","forEach","index","useEffect","temp","filter","includes","maxW","overflow","spacing","justifyContent","alignItems","my","w","ref","isMulti","onChange","e","align","wrap","mb","current","select","clearValue","exportComponentAsJPEG","fileName","html2CanvasOptions","backgroundColor","scrollX","window","scrollY","windowWidth","document","documentElement","offsetWidth","windowHeight","offsetHeight","h","mt","time","Math","random","day","position","length","top","as","p","borderWidth","borderColor","borderLeftColor","charAt","toLowerCase","borderLeftWidth","bg","slice","oldArray","zIndex","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.260eac84.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"solid\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import {\n  Box,\n  Button,\n  Container,\n  Flex,\n  HStack,\n  Stack,\n  Text,\n  useColorModeValue,\n  VStack,\n} from '@chakra-ui/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { exportComponentAsJPEG } from 'react-component-export-image';\nimport Select from 'react-select';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport data from './schedule.json';\nconst App = () => {\n  const exportBg = useColorModeValue('#FFFFFF', '#1A202C');\n  const selectRef = useRef(null);\n  const calendarRef = useRef(null);\n\n  const [renderData, setRenderData] = useState([]);\n  const [selectedCourses, setSelectedCourses] = useState([]);\n  const [removed, setRemoved] = useState([]);\n  const colors = [\n    '#4299E1B3',\n    '#E53E3EB3',\n    '#38A169B3',\n    '#DD6B20B3',\n    '#D53F8CB3',\n    '#00B5D8B3',\n    '#715096B3',\n    '#319795B3',\n    '#D69E2EB3',\n    '#505AD5B3',\n  ];\n  const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  const times = [\n    '18:00',\n    '12:00',\n    '15:00',\n    '13:00',\n    '19:00',\n    '09:00',\n    '10:00',\n    '14:00',\n    '17:00',\n    '11:00',\n    '16:00',\n    '20:00',\n  ].sort();\n\n  const options = [];\n\n  const uniqueCourseCode = [\n    ...new Map(data.map(item => [item['Course Code'], item])).values(),\n  ];\n\n  uniqueCourseCode.map(item => {\n    options.push({ value: item['Course Code'], label: item['Course Code'] });\n  });\n\n  const courseColorMap = {};\n  selectedCourses\n    .map(item => item.value)\n    .forEach((item, index) => (courseColorMap[item] = colors[index]));\n\n  const resetAll = () => {\n    selectRef.current.select.clearValue();\n    setSelectedCourses([]);\n    setRemoved([]);\n  };\n\n  useEffect(() => {\n    let temp = data.filter(item =>\n      selectedCourses.map(item => item.value).includes(item['Course Code'])\n    );\n    temp = temp.filter(item => !removed.includes(item['index']));\n    setRenderData(temp);\n  }, [removed, selectedCourses]);\n\n  return (\n    <Container maxW=\"container.xl\" overflow=\"auto\">\n      <HStack spacing={3} justifyContent=\"space-between\" alignItems=\"center\">\n        <Box my={3} color=\"black\" w=\"100%\">\n          <Select\n            ref={selectRef}\n            options={options}\n            isMulti\n            onChange={e => setSelectedCourses(e)}\n          />\n        </Box>\n        <ColorModeSwitcher />\n      </HStack>\n      <Flex justifyContent=\"space-between\" align=\"center\" wrap=\"wrap-reverse\">\n        <Text fontSize=\"xl\">Click On Any Schedule Item To Remove</Text>\n        <HStack spacing={3} justifyContent=\"flex-end\" mb={3}>\n          <Button onClick={() => setRemoved([])}>Reset Removed</Button>\n          <Button onClick={resetAll}>Reset All</Button>\n          <Button\n            onClick={() =>\n              exportComponentAsJPEG(calendarRef, {\n                fileName: 'Schedule.jpg',\n                html2CanvasOptions: {\n                  backgroundColor: exportBg,\n                  scrollX: -window.scrollX,\n                  scrollY: -window.scrollY,\n                  windowWidth: document.documentElement.offsetWidth,\n                  windowHeight: document.documentElement.offsetHeight,\n                },\n              })\n            }\n          >\n            Export\n          </Button>\n        </HStack>\n      </Flex>\n      <HStack\n        align=\"top\"\n        spacing=\"0\"\n        h=\"660px\"\n        w=\"1248px\"\n        overflow=\"auto\"\n        ref={calendarRef}\n      >\n        <VStack spacing=\"0\" mt={3}>\n          {times.map(time => (\n            <Flex\n              key={Math.random() * 1000}\n              h=\"50px\"\n              w=\"60px\"\n              alignItems=\"flex-end\"\n              justifyContent=\"center\"\n            >\n              {time}\n            </Flex>\n          ))}\n        </VStack>\n        {weekDays.map(day => (\n          <VStack spacing=\"0\" position=\"relative\">\n            <Flex\n              key={Math.random() * 1000}\n              h=\"50px\"\n              w=\"197px\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n            >\n              {day}\n            </Flex>\n            {times.map((time, index) =>\n              renderData.filter(\n                e => e['Day'] === day && e['Start Time'] === time\n              ).length !== 0 ? (\n                <Flex\n                  position=\"absolute\"\n                  top={`${50 * (index + 1)}px`}\n                  w=\"100%\"\n                >\n                  {renderData\n                    .filter(e => e['Day'] === day && e['Start Time'] === time)\n                    .map(item => (\n                      <Box\n                        as=\"button\"\n                        p={1}\n                        borderWidth=\"1px\"\n                        borderColor=\"white\"\n                        borderLeftColor={\n                          item['Class Section'].charAt(0).toLowerCase() ==\n                            'l' && 'yellow'\n                        }\n                        borderLeftWidth={\n                          item['Class Section'].charAt(0).toLowerCase() ==\n                            'l' && '5px'\n                        }\n                        bg={\n                          courseColorMap[item['Course Code']] ?? 'transparent'\n                        }\n                        overflow=\"auto\"\n                        w={`${\n                          100 /\n                          renderData.filter(\n                            e => e['Day'] === day && e['Start Time'] === time\n                          ).length\n                        }%`}\n                        h={`${\n                          (item['End Time'].slice(0, 2) -\n                            item['Start Time'].slice(0, 2)) *\n                          50\n                        }px`}\n                        onClick={() =>\n                          setRemoved(oldArray => [...oldArray, item['index']])\n                        }\n                      >\n                        <Stack spacing={1} fontSize=\"sm\">\n                          <Box>\n                            {item['Course Code']} - {item['Class Section']}\n                          </Box>\n                          <Box>{item['Class Type']}</Box>\n                          <Box>\n                            {item['Start Time']} - {item['End Time']}\n                          </Box>\n                        </Stack>\n                      </Box>\n                    ))}\n                </Flex>\n              ) : (\n                <Box\n                  top={`${50 * (index + 1)}px`}\n                  w=\"100%\"\n                  h=\"50px\"\n                  borderWidth=\"1px\"\n                  position=\"absolute\"\n                  zIndex=\"-1\"\n                />\n              )\n            )}\n          </VStack>\n        ))}\n      </HStack>\n    </Container>\n  );\n};\n\nexport default App;\n","import { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <ChakraProvider>\n    <ColorModeScript />\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}
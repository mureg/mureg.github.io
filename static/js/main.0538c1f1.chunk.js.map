{"version":3,"sources":["ColorModeSwitcher.js","components/Calendar.jsx","components/ListView.jsx","App.js","Theme.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","onClick","icon","Calendar","grouped","weekDays","hours","courseColorMap","setRemoved","calendarRef","align","spacing","h","w","overflow","ref","mt","map","hour","alignItems","justifyContent","Math","random","day","position","index","top","item","as","p","borderWidth","borderColor","borderLeftWidth","borderLeftColor","charAt","toLowerCase","bg","length","slice","oldArray","zIndex","ListView","isLazy","minH","px","mb","alignSelf","borderRadius","direction","Close","fontWeight","orientation","App","useState","data","setData","exportBg","selectRef","useRef","showCalendar","setShowCalendar","setGrouped","selectedCourses","setSelectedCourses","removed","error","setError","toast","useToast","useEffect","fetch","then","response","ok","json","Error","split","Date","toISOString","showRefreshToast","catch","title","description","status","duration","isClosable","colors","sort","options","Map","values","push","value","label","forEach","temp","filter","includes","groups","tempGrouped","a","reduce","o","g","i","justify","thickness","speed","maxW","my","isClearable","isMulti","onChange","e","Button","rightIcon","ChevronDown","current","select","clearValue","exportComponentAsJPEG","fileName","html2CanvasOptions","backgroundColor","scrollX","window","scrollY","windowWidth","document","documentElement","offsetWidth","windowHeight","offsetHeight","Theme","extendTheme","styles","global","body","mode","ReactDOM","render","theme","getElementById"],"mappings":"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","file":"static/js/main.0538c1f1.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"solid\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import { Box, Flex, HStack, Stack, VStack } from '@chakra-ui/react';\nconst Calendar = ({\n  grouped,\n  weekDays,\n  hours,\n  courseColorMap,\n  setRemoved,\n  calendarRef,\n}) => {\n  return (\n    <HStack\n      align=\"top\"\n      spacing=\"0\"\n      h=\"660px\"\n      w=\"1248px\"\n      overflow=\"auto\"\n      ref={calendarRef}\n    >\n      <VStack spacing=\"0\" mt={3}>\n        {hours.map(hour => (\n          <Flex\n            key={Math.random() * 1000}\n            h=\"50px\"\n            w=\"60px\"\n            alignItems=\"flex-end\"\n            justifyContent=\"center\"\n          >\n            {hour}\n          </Flex>\n        ))}\n      </VStack>\n      {weekDays.map(day => (\n        <VStack spacing=\"0\" position=\"relative\">\n          <Flex\n            key={Math.random() * 1000}\n            h=\"50px\"\n            w=\"197px\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            {day}\n          </Flex>\n          {hours.map((hour, index) =>\n            grouped[day]?.[hour] ? (\n              <Flex position=\"absolute\" top={`${50 * (index + 1)}px`} w=\"100%\">\n                {grouped[day][hour].map(item => (\n                  <Box\n                    as=\"button\"\n                    p={1}\n                    borderWidth=\"1px\"\n                    borderColor={courseColorMap[item['Course Code']]}\n                    borderLeftWidth=\"5px\"\n                    borderLeftColor={\n                      item['Class Section'].charAt(0).toLowerCase() === 'l'\n                        ? 'yellow'\n                        : 'blackAlpha.500'\n                    }\n                    bg={courseColorMap[item['Course Code']] ?? 'transparent'}\n                    overflow=\"auto\"\n                    w={`${100 / grouped[day][hour].length}%`}\n                    h={`${\n                      (item['End Time'].slice(0, 2) -\n                        item['Start Time'].slice(0, 2)) *\n                      50\n                    }px`}\n                    onClick={() =>\n                      setRemoved(oldArray => [...oldArray, item['index']])\n                    }\n                  >\n                    <Stack spacing={1} fontSize=\"sm\">\n                      <Box>\n                        {item['Course Code']} - {item['Class Section']}\n                      </Box>\n                      <Box>{item['Class Type']}</Box>\n                      <Box>\n                        {item['Start Time']} - {item['End Time']}\n                      </Box>\n                    </Stack>\n                  </Box>\n                ))}\n              </Flex>\n            ) : (\n              <Box\n                top={`${50 * (index + 1)}px`}\n                w=\"100%\"\n                h=\"50px\"\n                borderWidth=\"1px\"\n                position=\"absolute\"\n                zIndex=\"-1\"\n              />\n            )\n          )}\n        </VStack>\n      ))}\n    </HStack>\n  );\n};\n\nexport default Calendar;\n","import { CloseIcon } from '@chakra-ui/icons';\nimport {\n  Box,\n  Divider,\n  Flex,\n  HStack,\n  IconButton,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Tag,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\nconst ListView = ({ grouped, weekDays, hours, setRemoved, courseColorMap }) => {\n  return (\n    <Tabs isLazy minH=\"500px\">\n      <TabList>\n        {weekDays.map(day => (\n          <Tab>{day}</Tab>\n        ))}\n      </TabList>\n\n      <TabPanels>\n        {weekDays.map(day => (\n          <TabPanel px=\"0\">\n            {hours.map(\n              hour =>\n                grouped[day]?.[hour] && (\n                  <>\n                    <HStack w=\"100%\" mb={3}>\n                      <Box alignSelf=\"start\" w=\"80px\">\n                        <Text fontSize=\"2xl\" color=\"gray.500\">\n                          {hour}\n                        </Text>\n                      </Box>\n                      <VStack spacing={3} align=\"start\" w=\"100%\">\n                        {grouped[day]?.[hour].map(item => (\n                          <VStack\n                            align=\"flex-start\"\n                            spacing={3}\n                            p={3}\n                            w=\"100%\"\n                            bg={courseColorMap[item['Course Code']]}\n                            borderLeftWidth=\"5px\"\n                            borderLeftColor={\n                              item['Class Section'].charAt(0).toLowerCase() ===\n                              'l'\n                                ? 'yellow'\n                                : 'blackAlpha.500'\n                            }\n                            borderRadius=\"md\"\n                            direction=\"column\"\n                          >\n                            <Flex\n                              justifyContent=\"space-between\"\n                              w=\"100%\"\n                              alignItems=\"center\"\n                            >\n                              <HStack>\n                                <Tag size=\"lg\" bg=\"blackAlpha.300\">\n                                  {item['Class Type']}\n                                </Tag>\n                                <Tag size=\"lg\" bg=\"blackAlpha.300\">\n                                  {item['Class Section']}\n                                </Tag>\n                              </HStack>\n                              <IconButton\n                                onClick={() =>\n                                  setRemoved(oldArray => [\n                                    ...oldArray,\n                                    item['index'],\n                                  ])\n                                }\n                                alignSelf=\"flex-end\"\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                icon={<CloseIcon />}\n                              />\n                            </Flex>\n                            <Text fontSize=\"2xl\" fontWeight=\"bold\">\n                              {item['Course Code']}\n                            </Text>\n                            <Text fontSize=\"xl\">\n                              {item['Start Time']} - {item['End Time']}\n                            </Text>\n                            <Text fontSize=\"xl\">{item['Venue (note)']}</Text>\n                          </VStack>\n                        ))}\n                      </VStack>\n                    </HStack>\n                    <Divider orientation=\"horizontal\" mb={3} />\n                  </>\n                )\n            )}\n          </TabPanel>\n        ))}\n      </TabPanels>\n    </Tabs>\n  );\n};\n\nexport default ListView;\n","import { CalendarIcon, ChevronDownIcon } from '@chakra-ui/icons';\nimport {\n  Box,\n  Button,\n  Container,\n  HStack,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Spinner,\n  Text,\n  useColorModeValue,\n  useToast,\n  VStack,\n  Wrap,\n} from '@chakra-ui/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { exportComponentAsJPEG } from 'react-component-export-image';\nimport { FaListUl } from 'react-icons/fa';\nimport Select from 'react-select';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Calendar from './components/Calendar';\nimport ListView from './components/ListView';\nconst App = () => {\n  const [data, setData] = useState({ data: [] });\n  const exportBg = useColorModeValue('#FFFFFF', '#2D3748');\n  const selectRef = useRef(null);\n  const calendarRef = useRef(null);\n  const [showCalendar, setShowCalendar] = useState(true);\n  const [grouped, setGrouped] = useState({});\n  const [selectedCourses, setSelectedCourses] = useState([]);\n  const [removed, setRemoved] = useState([]);\n  const [error, setError] = useState(null);\n  const toast = useToast();\n  useEffect(() => {\n    const getUrl = 'https://mureg.herokuapp.com/api/schedule';\n    const updateUrl = 'https://mureg.herokuapp.com/api/update';\n\n    fetch(getUrl)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Data Not Found');\n        }\n      })\n      .then(data => {\n        setData(data);\n        if (\n          data['lastUpdated'].split(' ')[0] !==\n          new Date().toISOString().split('T')[0]\n        ) {\n          fetch(updateUrl).then(() => showRefreshToast());\n        }\n      })\n      .catch(error => {\n        setError(error['message']);\n      });\n  }, []);\n\n  const showRefreshToast = () => {\n    toast({\n      title: 'New Data Available!',\n      description: 'Refresh To View The Latest Schedule.',\n      status: 'info',\n      duration: 5000,\n      isClosable: true,\n      position: 'top',\n    });\n  };\n\n  const colors = [\n    '#4299E1B3',\n    '#E53E3EB3',\n    '#38A169B3',\n    '#DD6B20B3',\n    '#D53F8CB3',\n    '#00B5D8B3',\n    '#715096B3',\n    '#319795B3',\n    '#D69E2EB3',\n    '#505AD5B3',\n  ];\n  const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  const hours = [\n    '18:00',\n    '12:00',\n    '15:00',\n    '13:00',\n    '19:00',\n    '09:00',\n    '10:00',\n    '14:00',\n    '17:00',\n    '11:00',\n    '16:00',\n    '20:00',\n  ].sort();\n\n  const options = [];\n\n  const uniqueCourseCode = [\n    ...new Map(data['data'].map(item => [item['Course Code'], item])).values(),\n  ];\n\n  uniqueCourseCode.map(item =>\n    options.push({ value: item['Course Code'], label: item['Course Code'] })\n  );\n\n  const courseColorMap = {};\n  selectedCourses\n    .map(item => item.value)\n    .forEach((item, index) => (courseColorMap[item] = colors[index]));\n\n  const resetAll = () => {\n    selectRef.current.select.clearValue();\n    setSelectedCourses([]);\n    setRemoved([]);\n  };\n\n  const handleExport = () => {\n    exportComponentAsJPEG(calendarRef, {\n      fileName: 'Schedule.jpg',\n      html2CanvasOptions: {\n        backgroundColor: exportBg,\n        scrollX: -window.scrollX,\n        scrollY: -window.scrollY,\n        windowWidth: document.documentElement.offsetWidth,\n        windowHeight: document.documentElement.offsetHeight,\n      },\n    });\n  };\n\n  useEffect(() => {\n    let temp = data['data'].filter(item =>\n      selectedCourses.map(item => item.value).includes(item['Course Code'])\n    );\n    temp = temp.filter(item => !removed.includes(item['index']));\n\n    const groups = ['Day', 'Start Time'];\n    const tempGrouped = {};\n\n    temp.forEach(function (a) {\n      groups\n        .reduce(function (o, g, i) {\n          o[a[g]] = o[a[g]] || (i + 1 === groups.length ? [] : {});\n          return o[a[g]];\n        }, tempGrouped)\n        .push(a);\n    });\n\n    setGrouped(tempGrouped);\n  }, [removed, selectedCourses]);\n\n  return data['data'].length === 0 ? (\n    <VStack h=\"100vh\" justify=\"center\" align=\"center\">\n      {error || <Spinner size=\"xl\" thickness=\"5px\" speed=\"0.65s\" />}\n      <Text fontSize=\"xl\">{error ? error : 'Loading Data...'}</Text>\n    </VStack>\n  ) : (\n    <Container maxW=\"container.xl\" overflow=\"auto\">\n      <HStack spacing={3} justifyContent=\"space-between\" alignItems=\"center\">\n        <Box my={3} color=\"black\" w=\"100%\">\n          <Select\n            isClearable={false}\n            ref={selectRef}\n            options={options}\n            isMulti\n            onChange={e => setSelectedCourses(e)}\n          />\n        </Box>\n        <IconButton\n          icon={showCalendar ? <FaListUl /> : <CalendarIcon />}\n          onClick={() => setShowCalendar(!showCalendar)}\n        />\n        <ColorModeSwitcher />\n      </HStack>\n      <Wrap spacing={3} justify=\"space-between\">\n        {showCalendar && (\n          <Text fontSize=\"xl\">Click On Any Schedule Item To Remove</Text>\n        )}\n        <Menu>\n          <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n            Actions\n          </MenuButton>\n          <MenuList>\n            <MenuItem onClick={() => setRemoved([])}>Reset Removed</MenuItem>\n            <MenuItem onClick={resetAll}>Reset All</MenuItem>\n            {showCalendar && <MenuItem onClick={handleExport}>Export</MenuItem>}\n          </MenuList>\n        </Menu>\n      </Wrap>\n\n      {showCalendar ? (\n        <Calendar\n          calendarRef={calendarRef}\n          grouped={grouped}\n          weekDays={weekDays}\n          hours={hours}\n          courseColorMap={courseColorMap}\n          setRemoved={setRemoved}\n        />\n      ) : (\n        <ListView\n          grouped={grouped}\n          weekDays={weekDays}\n          hours={hours}\n          setRemoved={setRemoved}\n          courseColorMap={courseColorMap}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import { extendTheme } from \"@chakra-ui/react\";\r\nimport { mode } from \"@chakra-ui/theme-tools\"\r\n\r\nconst Theme = extendTheme({\r\n    styles: {\r\n        global: (props) => ({\r\n            body: {\r\n                bg: mode(\"white\", \"gray.700\")(props),\r\n            },\r\n        }),\r\n    },\r\n})\r\n\r\nexport default Theme","import { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Theme from './Theme';\nReactDOM.render(\n  <ChakraProvider theme={Theme}>\n    <ColorModeScript />\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}